image: node:22

stages:
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

before_script:
  - yarn install --frozen-lockfile


# üìå –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ Merge Request
build:
  stage: build
  script:
    - yarn lint
    - yarn build
  only:
    - merge_requests
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - dist/  


# üìå –î–µ–ø–ª–æ–π –≤ Dockploy —á–µ—Ä–µ–∑ API (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ merge)
deploy:
  stage: deploy
  script:
    - |
      # –û–ø—Ä–µ–¥–µ–ª—è–µ–º APPLICATION_ID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ç–∫–∏
      if [[ "$CI_COMMIT_REF_NAME" == "stage" ]]; then
        APPLICATION_ID="$STAGE_APPLICATION_ID"
      elif [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        APPLICATION_ID="$MAIN_APPLICATION_ID"
      else
        echo "Error: Unsupported branch!"
        exit 1
      fi

      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã
      MISSING_VARS=()
      if [ -z "$DOKPLOY_API_URL" ]; then
        MISSING_VARS+=("DOCKPLOY_API_URL")
      fi
      if [ -z "$APPLICATION_ID" ]; then
        MISSING_VARS+=("APPLICATION_ID")
      fi
      if [ -z "$DOKPLOY_API_TOKEN" ]; then
        MISSING_VARS+=("DOKPLOY_API_TOKEN")
      fi

      # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
      if [ ${#MISSING_VARS[@]} -ne 0 ]; then
        echo "Error: The following required variables are not set:"
        for var in "${MISSING_VARS[@]}"; do
          echo "  - $var"
        done
        exit 1
      fi
      
      # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
      RESPONSE=$(curl -s -w "\n%{http_code}" -X 'POST' "$DOKPLOY_API_URL" \
        -H 'accept: application/json' \
        -H 'Content-Type: application/json' \
        -H "x-api-key: $DOKPLOY_API_TOKEN" \
        -d '{
          "applicationId": "'"$APPLICATION_ID"'"
        }'
      )
      HTTP_STATUS=${RESPONSE: -3}
      BODY=${RESPONSE%???}
      
      echo "Response: $BODY"
      echo "HTTP Status: $HTTP_STATUS"
      
      if [[ $HTTP_STATUS -ge 200 && $HTTP_STATUS -lt 300 ]]; then
        echo "Deployment successful!"
      else
        echo "Deployment failed with status $BODY $HTTP_STATUS"
        exit 1
      fi
  only:
    - stage
    - main
  resource_group: exclusive_pipeline
